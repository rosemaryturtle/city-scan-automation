---
format:
  html:
    theme: [source/custom.scss, none]
editor: source
execute:
  echo: false
  output: false
  cache: true
---

::: setup
{{< include source/scrollytelling.qmd >}}

```{r}
#| include: false
#| label: setup
# Read functions & packages
# Only the github version of leaflet supports terra, in place of raster, which is now required as sp (on which raster depends) is being deprecated
# devtools::install_github('rstudio/leaflet')
source("source/fns.R")
source("source/helpers.R")

city_dir <- file.path("mnt/", readLines("city-dir.txt"))
user_input_dir <- file.path(city_dir, "01-user-input/")
process_output_dir <- file.path(city_dir, "02-process-output/")
spatial_dir <- file.path(process_output_dir, "spatial/")
output_dir <- file.path(city_dir, "03-render-output/")
# City parameters
city_params <- read_yaml(file.path(user_input_dir, "city_inputs.yml"))
city <- city_params$city_name
city_string <- tolower(city) %>% stringr::str_replace_all(" ", "-")
country <- city_params$country_name

# Load map layer parameters
layer_params_file <- 'source/layers.yml' # Also used by fns.R
layer_params <- read_yaml(layer_params_file)
```

```{r}
#| include: false
#| label: prerender
source('R/maps.R')
```

---
title: "`r paste(city, country, sep = ', ')`, City Scan"
---

```{r}
# Get text
city_text <- read_md(file.path(user_input_dir, "text-files/manual-text.md"))
generic_text <- read_yaml("source/generic-text.yml") %>% rapply(double_space, how = "replace") # Do I only want this for print?
slide_texts <- merge_lists(city_text, generic_text)
```

:::

::: topbar
# {{< meta title >}}

::: navigation
```{r}
#| output: asis
# Dynamically add sections to table of contents ... there's probably a better way?
sections <- readLines("index.qmd") %>%
  subset(str_detect(., "^##")) %>% str_replace("# ", "- ") %>% str_replace_all("#", "  ")

anchors <- sections %>% str_extract("^\\s*- (.*$)", group = T) %>% tolower() %>% str_replace_all(c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
  str_replace("(.*)", "(#\\1)")

paste0(str_replace(sections, "(^\\s*- )(.+$)", "\\1[\\2]"), anchors) %>% { cat("- <span id='dynamic-header'>City Scan</span>  &or;", ., sep = "\n") }
```

[Inputs version](https://bennotkin.quarto.pub/gagarin-city-scan-form/)

:::
:::

::: text-column

# {{< meta title >}}

## Executive Summary
```{r}
#| output: asis
#| label: executive_summary
print_slide_text(slide_texts$executive_summary$executive_summary)
```

## Setting the Context

### Basic City Information

TK Show aerial layer? Zoom in from country map? Show country map on left side?

### The State of Urban Infrastructure and Service Delivery
```{r}
#| output: asis
print_slide_text(slide_texts$setting_the_context$infrastructure_and_service_delivery)
```

## Population and Demographic Trends

### Population Growth

```{r}
#| output: asis
# include_html_chart(file.path(output_dir, "plots/html/---.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_growth)
```

### Population Density (chart)

```{r}
#| output: asis
# include_html_chart(file.path(output_dir, "plots/html/---.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_density_chart)
```

### Population Distribution by Age & Sex

```{r}
#| output: asis
# Necessary to remove leading white space because it triggers codeblock formatting
include_html_chart(file.path(output_dir, "plots/html/age_stats.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_distribution_age_sex)
```

### Population Density

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$population_density)
```

### Relative Wealth Index

```{r}
#| output: asis
print_slide_text(slide_texts$demographics$relative_wealth)
```

## Economic Activity

### Economic Hotspots

```{r}
#| include: false
#| label: economic_activity
economic_activity <- fuzzy_read(spatial_dir, "avg_rad_sum", rast)

# Interactive Plot (Leaflet)
add_economic_activity_layer <- create_layer_function(
  data = rast_as_vect(economic_activity), yaml_key = "economic_activity",
  labFormat = labelFormat(digits = 2))
all_maps <- add_economic_activity_layer(all_maps)
added_layers <- c(added_layers, layer_params[["economic_activity"]]$group_id)

# Static plot (PNG)
plot_economic_activity <- plot_static(data = economic_activity, yaml_key = "economic_activity")
save_plot(plot = plot_economic_activity, filename = "economic_activity.png", directory = styled_maps_dir)
```

### Economic Hotspots

```{r}
#| output: asis
print_slide_text(slide_texts$economic_activity$economic_hotspots)
```

### Change in Economic Hotspots

```{r}
#| output: asis
print_slide_text(slide_texts$economic_activity$economic_change)
```

### Share of Employment by Sector

```{r}
#| eval: false
#| include: false
#| output: asis
# Plot width is wrong: makes left side too large
include_html_chart(fuzzy_read(file.path(output_dir, "plots/html"), "employment-sectors", paste))
```

```{r}
#| output: asis
print_slide_text(slide_texts$economic_activity$employment_share)
```

![](generated/styled-maps/economic_change.png)

```{r}
#| output: asis
print_slide_text(slide_texts$economic_activity$economic_change)
```

### Social Distancing
*(Need sample data)*

```{r}
#| output: asis
# print_slide_text(slide_texts$demographics$social_distancing)
```

## Built Form

### Urban Extent and Change

```{r}
#| output: asis
include_html_chart(file.path(output_dir, "plots/html/urban_built_up_area.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$wsf)
```

### Built-up Density

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$builtup_density)
```

### Land Cover

```{r}
#| output: asis
include_html_chart(file.path(output_dir, "plots/html/landcover.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$land_cover)
```

### Intersection Density

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$intersections)
```

### Access to Schools

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$schools)
```

### Access to Healthcare

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$health_facilities)
```

## Climate Conditions

### Solar Photovoltaic Potential

```{r}
#| output: asis
include_html_chart(file.path(output_dir, "plots/html/_PV_graph.html"))
```

```{r}
#| output: true
# plot_
```

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$solar)
```

### Air Quality

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$air_quality)
```

### Summer Surface Temperature

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$summer_lst)
```

### Vegetated Areas

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$vegetation)
```

### Forests & Deforestation

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$forest)
```

## Risk Identification

### Fluvial Flooding

```{r}
#| output: asis
# include_html_chart(file.path(output_dir, "plots/html/fu_wsf.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$flooding_builtup_fluvial)
```

### Pluvial Flooding

```{r}
#| output: asis
# include_html_chart(file.path(output_dir, "plots/html/pu_wsf.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$flooding_builtup_pluvial)
```

### Coastal Flooding

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$flooding_infrastructure_coastal)
# print_slide_text(slide_texts$risk_identification$flooding_builtup_coastal)
# print_slide_text(slide_texts$risk_identification$flooding_population_coastal)
```

### Combined Flooding

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$flooding_builtup_combined)
```

### Sea-level Rise
*(Incomplete)*

```{r}
#| output: asis
#| label: sea_level
print_slide_text(slide_texts$risk_identification$sea_level_rise)
```

### Coastal Erosion
*(Incomplete)*

```{r}
#| output: asis
#| label: erosion
print_slide_text(slide_texts$risk_identification$coastal_erosion)
```

### Elevation

```{r}
#| output: asis
include_html_chart(file.path(output_dir, "plots/html/elevation.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$elevation)
```

### Slope

```{r}
#| output: asis
include_html_chart(file.path(output_dir, "plots/html/slope.html"))
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$slope)
```

### Landslides

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$landslides)
```

### Earthquakes

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$earthquake_events)
# print_slide_text(slide_texts$risk_identification$seismic_hazard)
# print_slide_text(slide_texts$risk_identification$seismic_risk)
```

### Liquefaction

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$liquefaction)
```

### Burnable Area

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$burnable)
```

### Moisture

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$moisture)
```

### Historical Burnt Area

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$burnt_area)
```

### Fire Potential
```{r}
#| include: false
#| label: fwi
# fwi <- fuzzy_read(spatial_dir, "fwi", rast)
# 
# # Interactive Plot (Leaflet)
# add_fwi_layer <- create_layer_function(data = fwi, yaml_key = "fwi")
# all_maps <- add_fwi_layer(all_maps)
# added_layers <- c(added_layers, "fire-potential")

# Static plot (PNG)
# Commenting out because of large size (Need to change tile zoom level and static bounds)
# plot_fwi <- plot_static(data = fwi, yaml_key = "fwi")
# save_plot(plot = plot_fwi, filename = "fwi.png", directory = styled_maps_dir)
```

<!-- ![](generated/styled-maps/fwi.png) -->

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$fwi)
```
:::

::: maps
```{r}
#| output: true
#| label: leaflet_maps
# # all_maps # Created in maps.R
# plots_html %>%
  { Reduce(\(x, f) f(x), ., init = plot_basemap("vector")) } %>%
  add_aoi() %>%
  addLayersControl(
    overlayGroups = group_ids,
    options = layersControlOptions(collapsed = TRUE))

  # If I want to use javascript directly I could use htmlwidgets::onRender(),
  # or maybe just an observable cell
```
:::
