---
format:
  html:
    theme: [source/custom.scss, none]
editor: source
execute:
  echo: false
  output: false
  cache: true
engine: knitr
---

::: setup

```{r}
#| include: false
#| label: prerender
source('R/maps-web.R')
cover_image <- fuzzy_read(file.path(output_dir, "maps"), "^aoi.png$", paste)
```

```{r}
#| cache: false
# Which layers do we have plots for? Tell Observable cells
ojs_define(createdMaps = names(plots_html))
```

---
title: "`r paste(city, country, sep = ', ')`"
---

```{r}
#| label: get-text
generic_text <- read_yaml("source/generic-text.yml") %>% rapply(double_space, how = "replace") # Do I only want this for print?
city_text_file <- file.path(user_input_dir, "text-files/manual-text.md")
if (file.exists(city_text_file)) {
  city_text <- read_md(city_text_file)
  slide_texts <- merge_lists(city_text, generic_text)
} else {
  slide_texts <- generic_text
}
slide_texts <- unlist(slide_texts, recursive = F) %>%
  setNames(str_extract(names(.), "\\.(.*)$", group = T))
```

```{r}
#| cache: false
ojs_define(layerParams = layer_params)
ojs_define(slide_texts = slide_texts)
```

```{ojs}
function renderDiv(text, divClass) {
  if (!text) return "";
  const textMarkdown = Array.isArray(text) ? md`${text.join('\n')}` : md`${text}`;
  return html`<div class="${divClass}">${textMarkdown}</div>`;
}

function addSlideText(slide) {
  return html`
  ${renderDiv(slide.takeaways, "takeaways")}
  ${renderDiv(slide.method, "method")}
  ${renderDiv(slide.footnote, "footnote")}`
}

function fillSlide(layer, chart = null, extra_layers = [], title = null, slide_text = null) {
  if (!createdMaps.includes(layer)) return md``;
  var mappingLayers = [...(extra_layers ?? []), layer]
    .map(lay => layerParams[lay].group_id)
    .filter(Boolean)
    .join(";"); 
  // To avoid rendering "null", "undefined", or "" in the document, return nothing explicitly:
  // if (!createdMaps.includes(layer)) return;
    if (!slide_text && layer) slide_text = slide_texts[layer];
    if (!title) title = slide_text?.title;
    if (!title && layer) title = layer;
  return html`
    <section class="level3">
      ${md`### ${title}`}
      ${html`<div class="map-list" data-layers="${mappingLayers}"></div>`}
      ${chart ?? ""}
      ${addSlideText(slide_text)}
    </section>
    `
}

textColumn = d3.select('.text-column').node();
columnWidth = textColumn.getBoundingClientRect().width * .95;
```

:::

::: topbar
# {{< meta title >}}

::: navigation
```{r}
#| label: navigation
#| output: asis
# Dynamically add sections to table of contents ... there's probably a better way?
sections <- readLines("index.qmd") %>%
  str_subset("^## ") %>%
  str_replace("## ", "")
# Slugify section names to make anchor paths
anchors <- sections %>%
  tolower() %>%
  str_replace_all(c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
  { paste0("#", .) }
cat(sep = "\n",
  "1. <span id='dynamic-header'>City Scan</span>  &or;",
  paste0("    ", seq_along(sections), ". [", sections, "]", "(", anchors, ")"))
```
:::

<div>
by the [City Resilience Program](https://www.gfdrr.org/en/crp)
</div>

:::

::: {#cover-page}
# {{< meta title >}} <!-- Put "City Scan" on second line-->

City Scan

`r month.name[lubridate::month(Sys.Date())]` `r lubridate::year(Sys.Date())`

::: donors
![GFDRR](https://upload.wikimedia.org/wikipedia/commons/f/fe/GFDRR_Primary_Logo_BW-Shade-nobg.png)

![World Bank](https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/The_World_Bank_logo.svg/624px-The_World_Bank_logo.svg.png)

![Austrian Federal Ministry of Finance](https://www.bmf.gv.at/dam/jcr:b259928e-ef89-43c8-9bf3-4d2dae928bcd/BMF_Logo_srgb_EN.png)

![Swiss Confederation Federal Department of Economic Affairs State Secretariat for Economic Affairs SECO](https://biotrade-asia.com/wp-content/uploads/2022/05/Logo-Swiss.png)
:::

:::

<!-- Hiding cover map until we have a way of producing it on Google Cloud -->
<!-- While hiding, also raising the map* -->
<!-- <div id="cover-map">
![](`r cover_image`)
</div> -->

::: text-column

## Executive Summary
```{r}
#| output: asis
#| label: executive_summary
slide_texts$executive_summary_no_anchor_ids$takeaways <-
  # If not adding 'Go to section' link, only need these 2 lines + print_slide_text()
# unlist(slide_texts$executive_summary) %>%
#   str_replace_all("#### (.*$)", "<p class='pseudo-h4'>\\1</p>")
  unlist(slide_texts$executive_summary) %>% paste(collapse="\n") %>%
  str_split("#### ") %>% .[[1]] %>% str_subset("^$", negate = T) %>%
  lapply(\(x) {
    section <- str_extract(x, "^.*")
    x <- str_replace(x, "^(.*)",  "<p class='pseudo-h4'>\\1</p>")
    anchor <- str_replace_all(tolower(trimws(section)), c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
      { paste0("#", .) }
    glue("{x}\n<p>→ [Go to section]({anchor})</p>\n")
  }) %>%
  str_split("\n\n") %>% unlist()
print_slide_text(slide_texts$executive_summary_no_anchor_ids)
```

## Setting the Context

### Basic City Information
```{r}
#| output: asis
#| label: basic_city_info
print_slide_text(slide_texts$basic_city_info)
```

## Population and Demographic Trends

```{ojs}
//| output: asis
fillSlide("population")

import {chart_pg}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
// fillSlide("population_growth", chart_pas)
html`<section class="level4">
    ${md`#### Population Growth`}
    ${chart_pg ?? ""}
    ${addSlideText(slide_texts.population_growth)}
    </section>`
```

```{r}
#| output: asis
plots_file <- fuzzy_read(charts_dir, "density-scatter", paste)
if (!is.na(plots_file)) {
  cat("#### Population Density\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$population_density_chart)
}
```

```{ojs}
//| output: asis
import {chart_pas}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
// fillSlide("population_distribution_age_sex", chart_pas)
html`<section class="level4">
    ${md`#### Population Distribution by Age & Sex`}
    ${chart_pas ?? ""}
    ${addSlideText(slide_texts.population_distribution_age_sex)}
    </section>`
```

```{ojs}
//| output: true
fillSlide("rwi")
```

## Economy

```{ojs}
//| output: asis
fillSlide("economic_activity")
fillSlide("economic_change")
```

```{r}
#| output: asis
plots_file <- fuzzy_read(charts_dir, "national-shares", paste)
if (!is.na(plots_file)) {
  cat("#### Cities’ Shares of National Population, Employment & GDP\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$national_shares)
}
plots_file <- fuzzy_read(charts_dir, "oxford-gdp_line", paste)
if (!is.na(plots_file)) {
  cat("#### GDP Growth\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$gdp_growth)
}
plots_file <- fuzzy_read(charts_dir, "oxford-emp_line", paste)
if (!is.na(plots_file)) {
  cat("#### Employment Growth\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$employment_growth)
}
plots_file <- fuzzy_read(charts_dir, "oxford-pop_line", paste)
if (!is.na(plots_file)) {
  cat("#### Population Growth\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$population_growth_multicity)
}
plots_file <- fuzzy_read(charts_dir, "gdp-per-capita", paste)
if (!is.na(plots_file)) {
  cat("#### Per Capita GDP Growth\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$gdp_per_capita_growth)
}
plots_file <- fuzzy_read(charts_dir, "employment-sectors", paste)
if (!is.na(plots_file)) {
  cat("#### Share of Employment by Sector\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$employment_share)
}
plots_file <- fuzzy_read(charts_dir, "gva-sectors", paste)
if (!is.na(plots_file)) {
  cat("#### Per Capita GDP Growth\n") 
  cat(glue('<img style="max-width:95%" src="{plots_file}">\n\n\n'))
  print_slide_text(slide_texts$gva_share)
}
```

## Built Form

```{ojs}
//| output: true
import {chart_uba} 
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("wsf", chart_uba)

fillSlide("wsf_tracker")

fillSlide("impervious")

import {chart_lc}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("land_cover", chart_lc)
fillSlide("school_zones", null, null, null, slide_texts.school_proximity)
fillSlide("health_zones", null, null, null, slide_texts.health_proximity)
```

## Climate Conditions

```{ojs}
//| output: asis
import {chart_pv}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("solar", chart_pv)

fillSlide("air_quality")
fillSlide("summer_lst")
fillSlide("vegetation")
fillSlide("forest", null, ["deforest"])
```

## Risk Identification
```{ojs}
//| output: true
import {chart_fe}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
html`<section class="level4">
    ${md`#### Signficant Flood Events`}
    ${chart_fe ?? ""}
    ${addSlideText(slide_texts.flood_events)}
    </section>`

fillSlide("fluvial", null, ["infrastructure"], null, slide_texts.flooding_infrastructure_fluvial)
fillSlide("pluvial", null, ["infrastructure"], null, slide_texts.flooding_infrastructure_pluvial)
fillSlide("coastal", null, ["infrastructure"], null, slide_texts.flooding_infrastructure_coastal)
fillSlide("combined_flooding", null, ["infrastructure"], null, slide_texts.flooding_infrastructure_combined)

import {chart_fu}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("fluvial", chart_fu, ["wsf"], null, slide_texts.flooding_builtup_fluvial)

import {chart_pu} 
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("pluvial", chart_pu, ["wsf"], null, slide_texts.flooding_builtup_pluvial)

import {chart_cu}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("coastal", chart_cu, ["wsf"], null, slide_texts.flooding_builtup_coastal)

import {chart_comb}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("combined_flooding", chart_comb, ["wsf"], null, slide_texts.flooding_builtup_combined)

fillSlide("fluvial", null, ["population"], null, slide_texts.flooding_population_fluvial)
fillSlide("pluvial", null, ["population"], null, slide_texts.flooding_population_pluvial)
fillSlide("coastal", null, ["population"], null, slide_texts.flooding_population_coastal)
fillSlide("combined_flooding", null, ["population"], null, slide_texts.flooding_population_combined)

fillSlide("elevation")
fillSlide("slope")
fillSlide("landslides")

import {chart_ee}
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
html`<section class="level4">
    ${md`#### Signficant Earthquake Events`}
    ${chart_ee ?? ""}
    ${addSlideText(slide_texts.earthquake_events)}
    </section>`

fillSlide("liquefaction")
fillSlide("roads")
fillSlide("burnable")
fillSlide("moisture")

import {chart_fwi} 
with {columnWidth as plotWidth}
from "@carolinecullinan/tunis-tunisia"
fillSlide("burnt_area", chart_fwi)
```

:::

::: maps
```{r}
#| output: true
#| label: leaflet_maps
# # all_maps # Created in maps.R
aoi_fgb <- file.path(fgb_dir, "aoi.fgb")

plots_html %>%
  { Reduce(\(x, f) f(x), ., init = plot_basemap("vector")) } %>%
  addFgb(file = aoi_fgb, stroke = TRUE, color = "black", weight = 2, fill = F, opacity = .9) %>%
  addLayersControl(
    overlayGroups = group_ids,
    position = "topleft",
    options = layersControlOptions(collapsed = TRUE)) %>%
  addScaleBar(position = "bottomleft")

# If I want to use javascript directly I could use htmlwidgets::onRender(),
# or maybe just an observable cell
```

:::

::: foot
Last edited `r Sys.Date()`.

This City Scan is a product of the City Resilience Program.

The findings, interpretations, and conclusions expressed in this City Scan do not necessarily reflect the views of the World Bank, the Executive Directors of the World Bank, or the governments they represent. Given that the data included in this work are derived from global sources, the World Bank does not guarantee its accuracy.

:::

{{< include source/scrollytelling.qmd >}}
