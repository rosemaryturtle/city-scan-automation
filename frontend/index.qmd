---
format:
  html:
    theme: [source/custom.scss, none]
editor: source
execute:
  echo: false
  output: false
  cache: true
---

::: setup

```{r}
#| include: false
#| label: prerender
source('R/maps.R')
```

---
title: "`r paste(city, country, sep = ', ')`, City Scan"
---

```{r}
# Get text
city_text <- read_md(file.path(user_input_dir, "text-files/manual-text.md"))
generic_text <- read_yaml("source/generic-text.yml") %>% rapply(double_space, how = "replace") # Do I only want this for print?
slide_texts <- merge_lists(city_text, generic_text)
slide_texts <- unlist(slide_texts, recursive = F) %>% setNames(str_extract(names(.), "\\.(.*)$", group = T))
```

:::

::: topbar
# {{< meta title >}}

::: navigation
```{r}
#| output: asis
# Dynamically add sections to table of contents ... there's probably a better way?
sections <- readLines("index.qmd") %>%
  subset(str_detect(., "^##")) %>% str_replace("# ", "- ") %>% str_replace_all("#", "  ")

anchors <- sections %>% str_extract("^\\s*- (.*$)", group = T) %>% tolower() %>% str_replace_all(c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
  str_replace("(.*)", "(#\\1)")

paste0(str_replace(sections, "(^\\s*- )(.+$)", "\\1[\\2]"), anchors) %>% { cat("- <span id='dynamic-header'>City Scan</span>  &or;", ., sep = "\n") }
```

[Inputs version](https://bennotkin.quarto.pub/gagarin-city-scan-form/)

:::
:::

::: text-column

# {{< meta title >}}

## Executive Summary
```{r}
#| output: asis
#| label: executive_summary
print_slide_text(slide_texts$executive_summary)
```

## Setting the Context

### Basic City Information
```{r}
#| output: asis
#| label: basic_city_info
print_slide_text(slide_texts$basic_city_info)
```

## Population and Demographic Trends

```{r}
#| output: asis
fill_slide_content("population")
print_slide_text(slide_texts$demographics$population_growth)
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "pop-density", paste)
if (!is.na(plots_file)) {
  cat("#### Population Density\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$population_density_chart)
}

plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "\\?\\?\\?", paste)
if (!is.na(plots_file)) {
  cat("#### Population Distribution by Age\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$population_density_chart)
}

plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "age_stats", paste)
if (!is.na(plots_file)) {
  cat("#### Population Distribution by Age & Sex\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$population_distribution_age_sex)
}
```

```{r}
#| output: asis
fill_slide_content("rwi")
```

## Economic Activity

```{r}
#| output: asis
fill_slide_content("economic_activity")
```

```{r}
#| output: asis
fill_slide_content("economic_change")
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "national-shares", paste)
if (!is.na(plots_file)) {
  cat("#### Cities’ Shares of National Population, Employment & GDP\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$national_shares)
}
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "oxford-gdp-plot", paste)
if (!is.na(plots_file)) {
  cat("#### GDP Growth\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$gdp_growth)
}
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "oxford-emp-plot", paste)
if (!is.na(plots_file)) {
  cat("#### Employment Growth\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$employment_growth)
}
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "oxford-pop-plot", paste)
if (!is.na(plots_file)) {
  cat("#### Population Growth\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$population_growth_multicity)
}
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "\\?\\?\\?", paste)
if (!is.na(plots_file)) {
  cat("#### Per Capita GDP Growth\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$gdp_per_capita_growth)
}
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "employment-sectors", paste)
if (!is.na(plots_file)) {
  cat("#### Share of Employment by Sector\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$employment_share)
}
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "gva-sectors", paste)
if (!is.na(plots_file)) {
  cat("#### Per Capita GDP Growth\n") 
  include_html_chart(plots_file)
  print_slide_text(slide_texts$gva_share)
}
```

## Built Form

```{r}
#| output: asis
fill_slide_content("wsf")
```

```{r}
#| output: asis
fill_slide_content("impervious")
```

```{r}
#| output: asis
fill_slide_content("land_cover")
```

```{r}
#| output: asis
fill_slide_content("school_zones")
```

```{r}
#| output: asis
fill_slide_content("health_zones")
```

## Climate Conditions

```{r}
#| output: asis
fill_slide_content("solar")
```

```{r}
#| output: asis
fill_slide_content("air_quality")
```

```{r}
#| output: asis
fill_slide_content("summer_lst")
```

```{r}
#| output: asis
fill_slide_content("vegetation")
```

```{r}
#| output: asis
# Something appears wrong here – forest and deforest are both showing for forest?
fill_slide_content("forest", "deforest")
```

## Risk Identification

```{r}
#| output: asis
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "flood_timeline", paste)
if (!is.na(plots_file)) {
  cat("### Flood events\n") 
  include_html_chart(plots_file)
}
```

<!-- All the flooding -->
```{r}
#| output: asis
fill_slide_content("fluvial", "infrastructure", slide_text = slide_texts$flooding_infrastructure_fluvial)
```

```{r}
#| output: asis
fill_slide_content("pluvial", "infrastructure", slide_text = slide_texts$flooding_infrastructure_pluvial)
```

```{r}
#| output: asis
fill_slide_content("coastal", "infrastructure", slide_text = slide_texts$flooding_infrastructure_coastal)
```

```{r}
#| output: asis
fill_slide_content("combined_flooding", "infrastructure", slide_text = slide_texts$flooding_infrastructure_combined)
```

```{r}
#| output: asis
fill_slide_content("fluvial", "wsf", slide_text = slide_texts$flooding_builtup_fluvial)
```

```{r}
#| output: asis
fill_slide_content("pluvial", "wsf", slide_text = slide_texts$flooding_builtup_pluvial)
```

```{r}
#| output: asis
fill_slide_content("coastal", "wsf", slide_text = slide_texts$flooding_builtup_coastal)
```

```{r}
#| output: asis
fill_slide_content("combined_flooding", "wsf", slide_text = slide_texts$flooding_builtup_combined)
```

```{r}
#| output: asis
fill_slide_content("fluvial", "population", slide_text = slide_texts$flooding_population_fluvial)
```

```{r}
#| output: asis
fill_slide_content("pluvial", "population", slide_text = slide_texts$flooding_population_pluvial)
```

```{r}
#| output: asis
fill_slide_content("coastal", "population", slide_text = slide_texts$flooding_population_coastal)
```

```{r}
#| output: asis
fill_slide_content("combined_flooding", "population", slide_text = slide_texts$flooding_population_combined)
```

```{r}
#| output: asis
fill_slide_content("elevation")
```

```{r}
#| output: asis
fill_slide_content("slope")
```

```{r}
#| output: asis
fill_slide_content("landslides")
```

```{r}
#| output: asis
plots_file <- fuzzy_read(file.path(output_dir, "plots/html"), "earthquake_timeline", paste)
if (!is.na(plots_file)) {
  cat("### Significant earthquakes\n") 
  include_html_chart(plots_file)
}
```

```{r}
#| output: asis
fill_slide_content("liquefaction")
```

```{r}
#| output: asis
fill_slide_content("roads")
```

```{r}
#| output: asis
fill_slide_content("burnable")
```

```{r}
#| output: asis
fill_slide_content("moisture")
```

```{r}
#| output: asis
fill_slide_content("burnt_area")
```

## Local Institutions & Planning

### Administrative Structure

```{r}
#| output: asis
print_slide_text(slide_texts$administrative_structure)
```

### Availability Of Development Plans And Policies

```{r}
#| output: asis
print_slide_text(slide_texts$document_availability)
```

### The State of Urban Infrastructure and Service Delivery

```{r}
#| output: asis
print_slide_text(slide_texts$infrastructure_and_service_delivery)
```


## Key Considerations for Investment Planning & Prioritization

### Concluding Questions

```{r}
#| output: asis
print_md(slide_texts$concluding_questions)
```

:::

::: maps
```{r}
#| output: true
#| label: leaflet_maps
# # all_maps # Created in maps.R
plots_html %>%
  { Reduce(\(x, f) f(x), ., init = plot_basemap("vector")) } %>%
  add_aoi() %>%
  addLayersControl(
    overlayGroups = group_ids,
    options = layersControlOptions(collapsed = TRUE))

# If I want to use javascript directly I could use htmlwidgets::onRender(),
# or maybe just an observable cell
```
:::

{{< include source/scrollytelling.qmd >}}
